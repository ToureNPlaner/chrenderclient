/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package chrenderclient;

import javax.swing.*;
import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author storandt, schnelle
 */
public class ZoomForm extends javax.swing.JFrame {
    public static final long serialVersionUID = 42;
    TPClient tp;

    int xBorder = 17;
    int yBorder = 44;
    Transformer transformer = new Transformer();
    public int originalX = -1;
    public int originalY = -1;

    public int width = 0;
    public int height = 0;

    public int minPriority = 0;
    boolean justDragged = false;

    Rectangle2D.Double view = new Rectangle2D.Double();
    Rectangle2D.Double extendedRange = new Rectangle2D.Double();

    double extendFactor = 5;
    double changeFactor = 1.8;

    /**
     * Creates new form zoomForm
     *
     * @param tp
     */
    public ZoomForm(TPClient tp) {
        this.tp = tp;
        initComponents();
        Dimension dim = new Dimension(1900, 1000);
        this.setPreferredSize(dim);
        //this.resize(new Dimension(400, 660));
        zoomPanel.setPreferredSize(new Dimension(1800, 900));
        zoomPanel.area = new Rectangle2D.Double(0, 0, 1800, 900);
        priorityLabel.setText("20");
        prioritySlider.setValue(20);
        setView();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        prioritySlider = new javax.swing.JSlider();
        zoomPanel = new ZoomPanel();
        priorityLabel = new javax.swing.JLabel();
        fixedMinPrioLabel = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        ImportMenu = new javax.swing.JMenu();
        LoadGraphItem = new javax.swing.JMenuItem();
        ExportMenu = new javax.swing.JMenu();
        SaveImageItem = new javax.swing.JMenuItem();
        SelectionMenu = new javax.swing.JMenu();
        ClearMarkerMenuItem = new javax.swing.JMenuItem();
        UndoLastMarkerMenuItem = new javax.swing.JMenuItem();
        AlgorithmsMenu = new javax.swing.JMenu();
        RunDijkstraMenuItem = new javax.swing.JMenuItem();
        OptionMenu = new javax.swing.JMenu();
        ShowPriorityNodesMenuItem = new javax.swing.JMenuItem();
        TestMenu = new javax.swing.JMenu();
        RangeTreeTestMenuItem = new javax.swing.JMenuItem();
        PstTestMenuItem = new javax.swing.JMenuItem();
        GridTestMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        prioritySlider.setMinorTickSpacing(5);
        prioritySlider.setPaintLabels(true);
        prioritySlider.setValue(0);
        prioritySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                prioritySliderStateChanged(evt);
            }
        });

        zoomPanel.setBackground(java.awt.Color.white);
        zoomPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                zoomPanelMouseWheelMoved(evt);
            }
        });
        zoomPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                zoomPanelMousePressed(evt);
            }

            public void mouseReleased(java.awt.event.MouseEvent evt) {
                zoomPanelMouseReleased(evt);
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                zoomPanelMouseExited(evt);
            }

            public void mouseEntered(java.awt.event.MouseEvent evt) {
                zoomPanelMouseEntered(evt);
            }
        });
        zoomPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                zoomPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout zoomPanelLayout = new javax.swing.GroupLayout(zoomPanel);
        zoomPanel.setLayout(zoomPanelLayout);
        zoomPanelLayout.setHorizontalGroup(
                zoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 335, Short.MAX_VALUE)
        );
        zoomPanelLayout.setVerticalGroup(
                zoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 556, Short.MAX_VALUE)
        );

        priorityLabel.setText("0");
        priorityLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        fixedMinPrioLabel.setText("min prio");
        fixedMinPrioLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        ImportMenu.setText("Import");

        LoadGraphItem.setText("Load Graph");
        LoadGraphItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadGraphItemActionPerformed(evt);
            }
        });
        ImportMenu.add(LoadGraphItem);

        MenuBar.add(ImportMenu);

        ExportMenu.setText("Export");

        SaveImageItem.setText("Save As PNG");
        SaveImageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveImageItemActionPerformed(evt);
            }
        });
        ExportMenu.add(SaveImageItem);

        MenuBar.add(ExportMenu);

        SelectionMenu.setText("Selection");

        ClearMarkerMenuItem.setText("Clear Marker");
        ClearMarkerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearMarkerMenuItemActionPerformed(evt);
            }
        });
        SelectionMenu.add(ClearMarkerMenuItem);

        UndoLastMarkerMenuItem.setText("Undo Last Marker");
        UndoLastMarkerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoLastMarkerMenuItemActionPerformed(evt);
            }
        });
        SelectionMenu.add(UndoLastMarkerMenuItem);

        MenuBar.add(SelectionMenu);

        AlgorithmsMenu.setText("Algorithms");

        RunDijkstraMenuItem.setText("Run Dijkstra");
        RunDijkstraMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunDijkstraMenuItemActionPerformed(evt);
            }
        });
        AlgorithmsMenu.add(RunDijkstraMenuItem);

        MenuBar.add(AlgorithmsMenu);

        OptionMenu.setText("Options");

        ShowPriorityNodesMenuItem.setText("Show Priority Nodes");
        ShowPriorityNodesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowPriorityNodesMenuItemActionPerformed(evt);
            }
        });
        OptionMenu.add(ShowPriorityNodesMenuItem);

        MenuBar.add(OptionMenu);

        TestMenu.setText("Test");

        MenuBar.add(TestMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(prioritySlider, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(fixedMinPrioLabel)
                                                        .addComponent(priorityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(zoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        ));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(zoomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(fixedMinPrioLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(priorityLabel))
                                        .addComponent(prioritySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        ));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean isInsideEventArea(int x, int y) {
        return zoomPanel.area.contains(new Point(x, y));
    }

    private void zoomPanelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomPanelMouseEntered
        setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
    }//GEN-LAST:event_zoomPanelMouseEntered

    private void zoomPanelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomPanelMouseExited
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_zoomPanelMouseExited

    private void LoadGraphItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadGraphItemActionPerformed
        System.out.println("clicked");
        extractGraph(view);
    }//GEN-LAST:event_LoadGraphItemActionPerformed

    private void setView() {
        int x = 6;
        int y = 49;
        width = (int) (zoomPanel.getWidth() * 50.0);
        height = (int) (zoomPanel.getHeight() * 50.0);
        view = new Rectangle2D.Double(x, y, width, height);
    }

    private void zoomPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomPanelMousePressed
        originalX = evt.getX();
        originalY = evt.getY();
        System.out.println("new x y: " + originalX + ", " + originalY);
    }//GEN-LAST:event_zoomPanelMousePressed

    private void zoomPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomPanelMouseReleased
        if (!isInsideEventArea(evt.getX(), evt.getY()))
            return;
        int dx = evt.getX() - originalX;
        int dy = evt.getY() - originalY;
        double factor = view.getWidth() / zoomPanel.area.width;
        if (dx == 0 && dy == 0 && justDragged == false) {
//            if (zoomPanel.clickedOnRectangleSelection(originalX, originalY)) {
//                zoomPanel.localZoomRect = null;
//                if (isCursorTouchpen) {
//                    setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
//                }
//                else
//                    setCursor(touchpen);
//                isCursorTouchpen = !isCursorTouchpen;
//                return;
//            }

			/*int id = prioDings.getNextNode((int) (view.x + (originalX - xBorder) * factor), (int) (view.y + (originalY - yBorder) * factor), minPriority);
            if (id == -1)
				return;
			Point point = transformer.transformToAbsolutePoint(graph.nodes, id);
			poiIDs.add(id);
			transformer.transformToScreenSize(zoomPanel.area, view, point);

			zoomPanel.addPaintPoint(point);
			System.out.println(point);
			*/
            //zoomPanel.repaint();
            return;
        }
        justDragged = false;
//        if (!isCursorTouchpen) {
//            zoomPanel.localZoomRect = null;
//            System.out.println("add rectangle " + originalX + " " + originalY + " " + dx + " " + dy);
//            zoomPanel.addRectangle(new Rectangle(originalX, originalY, dx, dy));
//            repaint();
//            return;
//        }
        dx = (int) (dx * factor);
        dy = (int) (dy * factor);
        System.out.println("deltas: " + dx + ", " + dy);

        view.x -= dx;
        view.y -= dy;
        extractGraph(view);
    }//GEN-LAST:event_zoomPanelMouseReleased

    private void zoomPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_zoomPanelMouseWheelMoved
        int notches = evt.getWheelRotation();
        System.out.println("notch: " + notches);
        double x = evt.getX() - xBorder;
        double y = evt.getY() - yBorder;
        System.out.println("pos: " + x + ", " + y);
        double factor = view.getWidth() / zoomPanel.area.width;
        x = x * factor;
        y = y * factor;
        if (notches > 0) {
            view.x -= (changeFactor - 1) * x;
            view.y -= (changeFactor - 1) * y;
            view.width *= changeFactor;
            view.height *= changeFactor;
        } else {

            if (view.width > 100 && view.height > 100) {
                view.x += x * (1 - 1.0 / changeFactor);
                view.y += y * (1 - 1.0 / changeFactor);
                view.width = view.width / changeFactor;
                view.height = view.height / changeFactor;
            }
        }
        extractGraph(view);
    }//GEN-LAST:event_zoomPanelMouseWheelMoved

    public String save() {
        JFileChooser fc = new JFileChooser();
        int result = fc.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) return "";
        try {
            File file = fc.getSelectedFile();
            return file.toString();

        } catch (Exception e) {
            return "";
        }
    }

    private void SaveImageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveImageItemActionPerformed
        try {
            String name = save();
            if ("".equals(name))
                name = view.width / 1000.0 + "x" + view.height / 1000.0 + "_P" + minPriority + ".png";
            zoomPanel.saveImage(name);
        } catch (IOException ex) {
            Logger.getLogger(ZoomForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveImageItemActionPerformed

    private void prioritySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_prioritySliderStateChanged
        JSlider slider = (JSlider) evt.getSource();

        minPriority = slider.getValue();
        System.out.println("MIN P " + minPriority);
        priorityLabel.setText("" + minPriority);
        extractGraph(view);
    }//GEN-LAST:event_prioritySliderStateChanged

    private void ClearMarkerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearMarkerMenuItemActionPerformed
        repaint();
    }//GEN-LAST:event_ClearMarkerMenuItemActionPerformed

    private void UndoLastMarkerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoLastMarkerMenuItemActionPerformed
        repaint();
    }//GEN-LAST:event_UndoLastMarkerMenuItemActionPerformed


    private void RunDijkstraMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunDijkstraMenuItemActionPerformed
    }//GEN-LAST:event_RunDijkstraMenuItemActionPerformed



    private void zoomPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_zoomPanelMouseDragged

        zoomPanelMouseReleased(evt);
        originalX = evt.getX();
        originalY = evt.getY();

        justDragged = true;
    }//GEN-LAST:event_zoomPanelMouseDragged

    private void swapElements(int a, int b, int[] data1, int[] data2) {
        int tmp1 = data1[a], tmp2 = data2[a];
        data1[a] = data1[b];
        data2[a] = data2[b];

        data1[b] = tmp1;
        data2[b] = tmp2;
    }

    Random generator = new Random();



    private void ShowPriorityNodesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowPriorityNodesMenuItemActionPerformed
        zoomPanel.showPriorityNodes = !zoomPanel.showPriorityNodes;
        repaint();
    }//GEN-LAST:event_ShowPriorityNodesMenuItemActionPerformed

    private void GridTestMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GridTestMenuItemActionPerformed

    }//GEN-LAST:event_GridTestMenuItemActionPerformed


    public void extractGraph(Rectangle2D.Double range) {
        double factor = view.getWidth() / zoomPanel.area.width;
        extendedRange.x = range.x - (extendFactor - 1) / 2 * range.width;
        extendedRange.y = range.y - (extendFactor - 1) / 2 * range.height;
        extendedRange.width = extendFactor * range.width;
        extendedRange.height = extendFactor * range.height;
        if (zoomPanel.localZoomRect == null) {
            long time = System.currentTimeMillis();

            //ids = prioDings.getNodeSelection(extendedRange, minPriority);
            try {
                System.err.println("Requesting " + view);
                zoomPanel.priores = tp.BBPrioRequest(view, minPriority);
                transformer.transformToScreenSize(view, zoomPanel.area, zoomPanel.priores);
            } catch (IOException e) {
                e.printStackTrace();
            }
            long time2 = System.currentTimeMillis();
            //System.out.println("PST:" + (time2 - time) + " with " + ids.size());
        } else {
            Rectangle2D.Double local = new Rectangle2D.Double();
            local.x = (int) (view.x + (zoomPanel.localZoomRect.x - xBorder) * factor);
            local.y = (int) (view.y + (zoomPanel.localZoomRect.y - yBorder) * factor);
            local.width = (int) (zoomPanel.localZoomRect.width * factor);
            local.height = (int) (zoomPanel.localZoomRect.height * factor);
            System.out.println(local);
            try {
                System.err.println("Requesting local " + view);
                zoomPanel.priores = tp.BBPrioRequest(view, minPriority);
                transformer.transformToScreenSize(view, zoomPanel.area, zoomPanel.priores);
            } catch (IOException e) {
                e.printStackTrace();
            }
//            ids = prioGrid.getNodeSelection(local, minPriority/2, minPriority);
        }

        //System.out.println("IDs " + ids.size())
        //transformer.transformToAbsolutePoints(graph.nodes, ids, zoomPanel.priorityPoints);
        //transformer.transformToScreenSize(zoomPanel.area, range, zoomPanel.priorityPoints);
//        System.out.println("SCALE " + transformer.getScaleFactor(zoomPanel.area, range));
        // TODO: Support minLen, maxLen, maxRatio properly, now just unpack everything
        //edEx.getCHPriorityEdges(ids, zoomPanel.lines, range, -1.0, -1.0, -1.0, minPriority);
        //System.out.println("lines: " + zoomPanel.lines.size());
        //transformer.transformToAbsolutePoints(graph.nodes, ids, zoomPanel.points);
        //System.out.println("points " + zoomPanel.points.size());

        //	filterPOIs();
        //	transformer.transformToScreenSize(zoomPanel.area, range, zoomPanel.paintPoints);
        //	filterPaths();
        repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        final TPClient tp = new TPClient("http://localhost:8080");
	    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZoomForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZoomForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZoomForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZoomForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZoomForm(tp).setVisible(true);
            }
        });

    }

    @Override
    public void paint(Graphics g) {
        paintComponents(g);
        if (getBufferStrategy() != null) {
            g = getBufferStrategy().getDrawGraphics();
            zoomPanel.paint(g);
        }
        //getBufferStrategy().show();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AlgorithmsMenu;
    private javax.swing.JMenuItem ClearMarkerMenuItem;
    private javax.swing.JMenu DisplayMenu;
    private javax.swing.JMenu ExportMenu;
    private javax.swing.JMenuItem GridTestMenuItem;
    private javax.swing.JMenu ImportMenu;
    private javax.swing.JMenuItem LoadGraphItem;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenu OptionMenu;
    private javax.swing.JMenuItem PstTestMenuItem;
    private javax.swing.JMenuItem RangeTreeTestMenuItem;
    private javax.swing.JMenuItem RunDijkstraMenuItem;
    private javax.swing.JMenuItem SaveImageItem;
    private javax.swing.JMenu SelectionMenu;
    private javax.swing.JMenuItem ShowPriorityNodesMenuItem;
    private javax.swing.JMenuItem SmartPhoneMenuItem;
    private javax.swing.JMenuItem TabletMenuItem;
    private javax.swing.JMenu TestMenu;
    private javax.swing.JMenuItem UndoLastMarkerMenuItem;
    private javax.swing.JLabel fixedMinPrioLabel;
    private javax.swing.JLabel priorityLabel;
    private javax.swing.JSlider prioritySlider;
    private ZoomPanel zoomPanel;
    // End of variables declaration//GEN-END:variables
}
